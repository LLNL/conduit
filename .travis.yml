###############################################################################
# Copyright (c) 2014-2015, Lawrence Livermore National Security, LLC.
#
# Produced at the Lawrence Livermore National Laboratory
#
# LLNL-CODE-666778
#
# All rights reserved.
#
# This file is part of Conduit.
#
# For details, see: http://software.llnl.gov/conduit/.
#
# Please also read conduit/LICENSE
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the disclaimer below.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the disclaimer (as noted below) in the
#   documentation and/or other materials provided with the distribution.
#
# * Neither the name of the LLNS/LLNL nor the names of its contributors may
#   be used to endorse or promote products derived from this software without
#   specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL LAWRENCE LIVERMORE NATIONAL SECURITY,
# LLC, THE U.S. DEPARTMENT OF ENERGY OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
###############################################################################
sudo: false

language: cpp
compiler:
  - gcc
env:
  global:
    # std env vars CC + CXX get overridden
    - CONDUIT_CC=gcc-4.8
    - CONDUIT_CXX=g++-4.8
    - CONDUIT_FC=gfortran-4.8
    # we need to know the root dir for our 3rd party lib installs
    - TRAVIS_HOME=`pwd`
  matrix:
    #################################
    # we are testing:
    #  static vs shared libs
    #  python 2 vs 3
    #  cmake 3.3.0 vs 3.8.1
    #  coverage of unit tests
    #################################
    # cmake 3.3.1 + shared libs + python 2 + coverage
    #  (don't use mpi w/ coverage)
    - BUILD_SHARED_LIBS=ON
      MINICONDA=Miniconda2
      ENABLE_MPI=OFF
      ENABLE_COVERAGE=ON
      CMAKE_MAJOR=3.3
      CMAKE_MINOR=1
    # cmake 3.3.1 + static libs + python 2 + mpi
    - BUILD_SHARED_LIBS=OFF
      MINICONDA=Miniconda2
      ENABLE_MPI=ON
      ENABLE_COVERAGE=OFF
      CMAKE_MAJOR=3.3
      CMAKE_MINOR=1
    # cmake 3.3.1 + shared libs + python 3 + mpi
    - BUILD_SHARED_LIBS=ON
      MINICONDA=Miniconda3
      ENABLE_MPI=ON
      ENABLE_COVERAGE=OFF
      CMAKE_MAJOR=3.3
      CMAKE_MINOR=1
    # cmake 3.8.1 + shared libs + python 2 + mpi
    - BUILD_SHARED_LIBS=ON
      MINICONDA=Miniconda2
      ENABLE_MPI=ON
      ENABLE_COVERAGE=OFF
      CMAKE_MAJOR=3.8
      CMAKE_MINOR=1
    # cmake 3.8.1 + static libs + python 2 + mpi
    - BUILD_SHARED_LIBS=OFF
      ENABLE_MPI=ON
      MINICONDA=Miniconda2
      ENABLE_COVERAGE=OFF
      CMAKE_MAJOR=3.8
      CMAKE_MINOR=1
addons:
  apt:
    sources:
    - ubuntu-toolchain-r-test
    packages:
       - gcc-4.8
       - g++-4.8
       - gfortran-4.8
       - openmpi-bin
       - openmpi-doc
       - libopenmpi-dev
before_install:
  # download the ver of cmake we want to test
  - wget --no-check-certificate http://www.cmake.org/files/v${CMAKE_MAJOR}/cmake-${CMAKE_MAJOR}.${CMAKE_MINOR}-Linux-x86_64.sh
  # download miniconda (used get python, numpy, and hdf5)
  - wget --no-check-certificate http://repo.continuum.io/miniconda/${MINICONDA}-latest-Linux-x86_64.sh -O miniconda.sh
install:
  # install cmake
  - mkdir ${TRAVIS_HOME}/cmake/
  - sh cmake-${CMAKE_MAJOR}.${CMAKE_MINOR}-Linux-x86_64.sh --skip-license --prefix=${TRAVIS_HOME}/cmake/
  - export PATH=${TRAVIS_HOME}/cmake/bin:$PATH
  # install + update miniconda
  - chmod +x miniconda.sh
  - ./miniconda.sh -b -p ${TRAVIS_HOME}/miniconda
  - export PATH=${TRAVIS_HOME}/miniconda/bin:$PATH
  - conda update --yes conda
  # install numpy + hdf5 and the coveralls python package
  - conda install --yes numpy
  - conda install --yes hdf5
  - pip install cpp-coveralls
script:
  # echo cmake version
  - cmake --version
  - cd $TRAVIS_BUILD_DIR
  # create out-of-source build dir, and an install dir
  - mkdir travis-debug-build
  - mkdir travis-debug-install
  - cd    travis-debug-build
  # build type and install loc
  - CMAKE_OPTS="-DCMAKE_BUILD_TYPE=Debug"
  - CMAKE_OPTS="${CMAKE_OPTS} -DCMAKE_INSTALL_PREFIX=../travis-debug-install"
  # c & c++ compilers
  - CMAKE_OPTS="${CMAKE_OPTS} -DCMAKE_C_COMPILER=${CONDUIT_CC}"
  - CMAKE_OPTS="${CMAKE_OPTS} -DCMAKE_CXX_COMPILER=${CONDUIT_CXX}"
  # shared or static libs
  - CMAKE_OPTS="${CMAKE_OPTS} -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS}"
  # enable fortran support
  - CMAKE_OPTS="${CMAKE_OPTS} -DCMAKE_Fortran_COMPILER=${CONDUIT_FC}"
  - CMAKE_OPTS="${CMAKE_OPTS} -DENABLE_FORTRAN=ON"
  # enable mpi support
  - CMAKE_OPTS="${CMAKE_OPTS} -DENABLE_MPI=${ENABLE_MPI}"
  # enable python support
  - CMAKE_OPTS="${CMAKE_OPTS} -DENABLE_PYTHON=ON"
  # enable hdf5 support
  - CMAKE_OPTS="${CMAKE_OPTS} -DHDF5_DIR=${TRAVIS_HOME}/miniconda"
  # enable coverage (only when using shared libs case)
  - CMAKE_OPTS="${CMAKE_OPTS} -DENABLE_COVERAGE=${ENABLE_COVERAGE}"
  # configure with cmake
  - cmake  ${CMAKE_OPTS} ../src
  # build, test, and install
  - make
  - env CTEST_OUTPUT_ON_FAILURE=1 make test
  - make install
  # test our examples that demo using an installed conduit
  - cd $TRAVIS_BUILD_DIR
  - ./scripts/ci/travis-test-build-examples-vs-install.sh

after_success:
  - test ${ENABLE_COVERAGE} = "ON" && coveralls --gcov /usr/bin/gcov-4.8 --include src/libs/conduit --include src/libs/blueprint --gcov-options '\-lp' --root $TRAVIS_BUILD_DIR --build-root $TRAVIS_BUILD_DIR/travis-debug-build;
notifications:
  email:
    recipients:
      - cyrush@llnl.gov
    on_success: always
    on_failure: always
